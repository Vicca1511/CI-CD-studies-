name: Continuous Delivery

on:
  push:
    branches: [ main ]

jobs:
  deliver:
    runs-on: ubuntu-latest
    name: Package Application
    permissions:
      contents: read
    
    steps:
    # Passo 1: Fazer checkout do cÃ³digo
    - name: Checkout code
      uses: actions/checkout@v4

    # Passo 2: Criar arquivo ZIP
    - name: Create deployment package
      run: |
        zip -r project.zip main.py README.md requirements.txt

    # Passo 3: Fazer upload do artefato
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: project.zip
        path: project.zip

  deploy:
    runs-on: ubuntu-latest
    needs: deliver
    name: Deploy Application
    permissions:
      contents: read
      actions: read
    
    steps:
    # Passo 1: Baixar artefato
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: project.zip
        path: .

    # Passo 2: Verificar conteÃºdo
    - name: Display structure of downloaded files
      run: |
        echo "ConteÃºdo do diretÃ³rio:"
        ls -la
        echo ""
        echo "ConteÃºdo do ZIP:"
        unzip -l project.zip

    # Passo 3: Simular deploy (adicione seus comandos reais aqui)
    - name: Simulate deployment
      run: |
        echo "ðŸš€ Iniciando processo de deployment..."
        echo "ðŸ“¦ Arquivo project.zip preparado para deploy"
        echo "âœ… Deployment simulado concluÃ­do com sucesso!"

    # Configurar Buildx (APENAS no job deliver)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        driver: docker-container    

  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Check-out
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        driver: docker-container      
    
    - name: Build Docker image with Buildx
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: fastapi-app:latest
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
    
    - name: Testar imagem Docker
      run: |
          docker build -t fastapi-app .
          docker run -d -p 8000:8000 --name test-container fastapi-app
          sleep 5
          curl -f http://localhost:8000/health
          docker stop test-container
          docker rm test-container     
            